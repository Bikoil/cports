NEVER EVER REMOVE THIS PATCH
REBASE IT ON TOP OF THE VERSION YOU'RE UPGRADING

This makes certifi use the system certificates instead of the ones
provided with certifi instead, this allows us to add this package as a
dependency for other packages without worries.

This is based on the patch used by Alpine, which in turn is based on the
patch used by Debian.

diff --git a/certifi/core.py b/certifi/core.py
index 91f538b..6016b2f 100644
--- a/certifi/core.py
+++ b/certifi/core.py
@@ -10,13 +10,13 @@ import atexit
 def exit_cacert_ctx() -> None:
     _CACERT_CTX.__exit__(None, None, None)  # type: ignore[union-attr]
 
+SYS_CA_CERTS_PATH = '/etc/ssl/certs/ca-certificates.crt'
 
 if sys.version_info >= (3, 11):
 
     from importlib.resources import as_file, files
 
-    _CACERT_CTX = None
-    _CACERT_PATH = None
+    _CACERT_PATH = SYS_CA_CERTS_PATH
 
     def where() -> str:
         # This is slightly terrible, but we want to delay extracting the file
@@ -50,8 +50,7 @@ elif sys.version_info >= (3, 7):
 
     from importlib.resources import path as get_path, read_text
 
-    _CACERT_CTX = None
-    _CACERT_PATH = None
+    _CACERT_PATH = SYS_CA_CERTS_PATH
 
     def where() -> str:
         # This is slightly terrible, but we want to delay extracting the
@@ -77,10 +76,11 @@ elif sys.version_info >= (3, 7):
             _CACERT_PATH = str(_CACERT_CTX.__enter__())
             atexit.register(exit_cacert_ctx)
 
-        return _CACERT_PATH
+        return SYS_CA_CERTS_PATH
 
     def contents() -> str:
-        return read_text("certifi", "cacert.pem", encoding="ascii")
+        with open(where(), "r", encoding="ascii") as data:
+            return data.read()
 
 else:
     import os
@@ -106,9 +106,7 @@ else:
     # If we don't have importlib.resources, then we will just do the old logic
     # of assuming we're on the filesystem and munge the path directly.
     def where() -> str:
-        f = os.path.dirname(__file__)
-
-        return os.path.join(f, "cacert.pem")
-
+        return SYS_CA_CERTS_PATH
     def contents() -> str:
-        return read_text("certifi", "cacert.pem", encoding="ascii")
+        with open(where(), "r", encoding="ascii") as data:
+            return data.read()
