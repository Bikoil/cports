prereq for ppc-musttail.patch
Patch-Source: https://github.com/WebKit/WebKit/commit/0d018b90f3748e5cb86e937bd7708015899217ae
--
From 0d018b90f3748e5cb86e937bd7708015899217ae Mon Sep 17 00:00:00 2001
From: Justin Michaud <jmichaud@igalia.com>
Date: Wed, 4 Sep 2024 14:18:44 -0700
Subject: [PATCH] Fix ARMv7 clang build
 https://bugs.webkit.org/show_bug.cgi?id=279039

Reviewed by Yusuke Suzuki.

This works around some issues with the build when
using clang.

Re: tail calls, I am not sure if it is a clang bug
or if there is some other reason why it is failing
to make MUST_TAIL_CALL return JSRopeString::resolveToBufferSlow
a tail call, but it seems safe to disable it for now.

* Source/JavaScriptCore/wasm/WasmBBQJIT32_64.cpp:
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoad):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStore):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDSplat):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDShuffle):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDShift):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDExtmul):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadSplat):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadLane):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStoreLane):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadExtend):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadPad):
(JSC::Wasm::BBQJITImpl::BBQJIT::addConstant):
(JSC::Wasm::BBQJITImpl::BBQJIT::addExtractLane):
(JSC::Wasm::BBQJITImpl::BBQJIT::addReplaceLane):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDI_V):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDV_V):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDBitwiseSelect):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDRelOp):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDV_VV):
(JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDRelaxedFMA):
* Source/WTF/wtf/Compiler.h:

Canonical link: https://commits.webkit.org/283173@main
---
 .../JavaScriptCore/wasm/WasmBBQJIT32_64.cpp   | 21 +++++++++++++++++++
 Source/WTF/wtf/Compiler.h                     |  6 ++++++
 2 files changed, 27 insertions(+)

diff --git a/Source/JavaScriptCore/wasm/WasmBBQJIT32_64.cpp b/Source/JavaScriptCore/wasm/WasmBBQJIT32_64.cpp
index c591297f7309b..02e8546f9e93d 100644
--- a/Source/JavaScriptCore/wasm/WasmBBQJIT32_64.cpp
+++ b/Source/JavaScriptCore/wasm/WasmBBQJIT32_64.cpp
@@ -3092,56 +3092,67 @@ void BBQJIT::notifyFunctionUsesSIMD()
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDLoad(ExpressionType, uint32_t, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDStore(ExpressionType, ExpressionType, uint32_t)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDSplat(SIMDLane, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDShuffle(v128_t, ExpressionType, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDShift(SIMDLaneOperation, SIMDInfo, ExpressionType, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDExtmul(SIMDLaneOperation, SIMDInfo, ExpressionType, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDLoadSplat(SIMDLaneOperation, ExpressionType, uint32_t, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDLoadLane(SIMDLaneOperation, ExpressionType, ExpressionType, uint32_t, uint8_t, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDStoreLane(SIMDLaneOperation, ExpressionType, ExpressionType, uint32_t, uint8_t)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDLoadExtend(SIMDLaneOperation, ExpressionType, uint32_t, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDLoadPad(SIMDLaneOperation, ExpressionType, uint32_t, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 void BBQJIT::materializeVectorConstant(v128_t, Location)
@@ -3152,46 +3163,56 @@ void BBQJIT::materializeVectorConstant(v128_t, Location)
 ExpressionType BBQJIT::addConstant(v128_t)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addExtractLane(SIMDInfo, uint8_t, Value, Value&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addReplaceLane(SIMDInfo, uint8_t, ExpressionType, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDI_V(SIMDLaneOperation, SIMDInfo, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDV_V(SIMDLaneOperation, SIMDInfo, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDBitwiseSelect(ExpressionType, ExpressionType, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDRelOp(SIMDLaneOperation, SIMDInfo, ExpressionType, ExpressionType, B3::Air::Arg, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDV_VV(SIMDLaneOperation, SIMDInfo, ExpressionType, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
 }
 
 PartialResult WARN_UNUSED_RETURN BBQJIT::addSIMDRelaxedFMA(SIMDLaneOperation, SIMDInfo, ExpressionType, ExpressionType, ExpressionType, ExpressionType&)
 {
     UNREACHABLE_FOR_PLATFORM();
+    return { };
+
 }
 
 void BBQJIT::emitStoreConst(Value constant, Location loc)
diff --git a/Source/WTF/wtf/Compiler.h b/Source/WTF/wtf/Compiler.h
index 562786a9c0ddf..78a0ac6878d0b 100644
--- a/Source/WTF/wtf/Compiler.h
+++ b/Source/WTF/wtf/Compiler.h
@@ -270,11 +270,17 @@
 
 /* MUST_TAIL_CALL */
 
+// 32-bit platforms use different calling conventions, so a MUST_TAIL_CALL function
+// written for 64-bit may fail to tail call on 32-bit.
+#if COMPILER(CLANG)
+#if __SIZEOF_POINTER__ == 8
 #if !defined(MUST_TAIL_CALL) && defined(__cplusplus) && defined(__has_cpp_attribute)
 #if __has_cpp_attribute(clang::musttail)
 #define MUST_TAIL_CALL [[clang::musttail]]
 #endif
 #endif
+#endif
+#endif
 
 #if !defined(MUST_TAIL_CALL)
 #define MUST_TAIL_CALL
